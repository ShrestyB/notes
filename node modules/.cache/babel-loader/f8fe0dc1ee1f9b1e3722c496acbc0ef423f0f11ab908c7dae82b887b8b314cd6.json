{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sem7\\\\PlayPower\\\\notes\\\\src\\\\components\\\\Helpers\\\\NoteBody.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { fetchGlossaryTerms } from './src/components/Services/glossaryService'; // Adjust the path to where glossaryService.js is located\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function NoteBody({\n  note,\n  setNote,\n  setNewNoteFlag\n}) {\n  _s();\n  const textAreaRef = useRef(null);\n  const [glossary, setGlossary] = useState([]);\n  useEffect(() => {\n    if (textAreaRef.current) {\n      textAreaRef.style.currentheight = \"20px\";\n      textAreaRef.style.currentheight = textAreaRef.scrollHeight + \"px\";\n    }\n    if (note.body) {\n      // Fetch glossary terms whenever the note body changes\n      fetchGlossaryTerms(note.body).then(terms => {\n        setGlossary(terms); // Set glossary terms in state\n      });\n    }\n  }, [note.body]);\n  function expandNewNote() {\n    if (setNewNoteFlag !== undefined) {\n      // Component is being used in \"New Note\"\n      setNewNoteFlag(true);\n    }\n  }\n  function saveNoteBody(e) {\n    expandNewNote();\n    setNote(currentNote => ({\n      ...currentNote,\n      body: e.target.innerHTML,\n      // Update the note body with rich text\n      lastEdited: Date.now()\n    }));\n  }\n  function applyStyle(style) {\n    document.execCommand(style, false, null); // Applies the formatting style\n  }\n\n  // Function to highlight glossary terms within the note body\n  function highlightGlossaryTerms(text, terms) {\n    let highlightedText = text;\n    terms.forEach(({\n      term\n    }) => {\n      const regex = new RegExp(`\\\\b${term}\\\\b`, 'gi'); // Match the term globally, case-insensitive\n      highlightedText = highlightedText.replace(regex, `<mark>${term}</mark>`); // Highlight term\n    });\n    return highlightedText;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"formatting-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyStyle(\"bold\"),\n        children: \"Bold\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyStyle(\"italic\"),\n        children: \"Italic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyStyle(\"underline\"),\n        children: \"Underline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-taker-body\",\n      placeholder: \"Take a note...\",\n      contentEditable: \"true\" // Enable rich text editing\n      ,\n      dangerouslySetInnerHTML: {\n        __html: highlightGlossaryTerms(note.body, glossary)\n      } // Load saved rich text and highlight glossary terms\n      ,\n      onClick: expandNewNote,\n      onInput: saveNoteBody,\n      ref: ref => textAreaRef = ref,\n      style: {\n        minHeight: \"10px\",\n        padding: \"10px\",\n        whiteSpace: \"pre-wrap\",\n        overflowWrap: \"break-word\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(NoteBody, \"yavnuGk0MgIRjJJyB9d2NQJnmcE=\");\n_c = NoteBody;\nvar _c;\n$RefreshReg$(_c, \"NoteBody\");","map":{"version":3,"names":["React","useRef","useEffect","useState","fetchGlossaryTerms","jsxDEV","_jsxDEV","Fragment","_Fragment","NoteBody","note","setNote","setNewNoteFlag","_s","textAreaRef","glossary","setGlossary","current","style","currentheight","scrollHeight","body","then","terms","expandNewNote","undefined","saveNoteBody","e","currentNote","target","innerHTML","lastEdited","Date","now","applyStyle","document","execCommand","highlightGlossaryTerms","text","highlightedText","forEach","term","regex","RegExp","replace","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","contentEditable","dangerouslySetInnerHTML","__html","onInput","ref","minHeight","padding","whiteSpace","overflowWrap","_c","$RefreshReg$"],"sources":["C:/Sem7/PlayPower/notes/src/components/Helpers/NoteBody.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { fetchGlossaryTerms } from './src/components/Services/glossaryService'; // Adjust the path to where glossaryService.js is located\r\n\r\nexport function NoteBody({ note, setNote, setNewNoteFlag }) {\r\n    const textAreaRef = useRef(null);\r\n    const [glossary, setGlossary] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (textAreaRef.current) {\r\n            textAreaRef.style.currentheight = \"20px\";\r\n            textAreaRef.style.currentheight = textAreaRef.scrollHeight + \"px\";\r\n        }\r\n\r\n        if (note.body) {\r\n            // Fetch glossary terms whenever the note body changes\r\n            fetchGlossaryTerms(note.body).then((terms) => {\r\n                setGlossary(terms); // Set glossary terms in state\r\n            });\r\n        }\r\n    }, [note.body]);\r\n\r\n    function expandNewNote() {\r\n        if (setNewNoteFlag !== undefined) {\r\n            // Component is being used in \"New Note\"\r\n            setNewNoteFlag(true);\r\n        }\r\n    }\r\n\r\n    function saveNoteBody(e) {\r\n        expandNewNote();\r\n        setNote((currentNote) => ({\r\n            ...currentNote,\r\n            body: e.target.innerHTML, // Update the note body with rich text\r\n            lastEdited: Date.now(),\r\n        }));\r\n    }\r\n\r\n    function applyStyle(style) {\r\n        document.execCommand(style, false, null); // Applies the formatting style\r\n    }\r\n\r\n    // Function to highlight glossary terms within the note body\r\n    function highlightGlossaryTerms(text, terms) {\r\n        let highlightedText = text;\r\n\r\n        terms.forEach(({ term }) => {\r\n            const regex = new RegExp(`\\\\b${term}\\\\b`, 'gi'); // Match the term globally, case-insensitive\r\n            highlightedText = highlightedText.replace(regex, `<mark>${term}</mark>`); // Highlight term\r\n        });\r\n\r\n        return highlightedText;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"formatting-buttons\">\r\n                <button onClick={() => applyStyle(\"bold\")}>Bold</button>\r\n                <button onClick={() => applyStyle(\"italic\")}>Italic</button>\r\n                <button onClick={() => applyStyle(\"underline\")}>Underline</button>\r\n            </div>\r\n\r\n            <div\r\n                className=\"note-taker-body\"\r\n                placeholder=\"Take a note...\"\r\n                contentEditable=\"true\" // Enable rich text editing\r\n                dangerouslySetInnerHTML={{ __html: highlightGlossaryTerms(note.body, glossary) }} // Load saved rich text and highlight glossary terms\r\n                onClick={expandNewNote}\r\n                onInput={saveNoteBody}\r\n                ref={(ref) => (textAreaRef = ref)}\r\n                style={{\r\n                    minHeight: \"10px\",\r\n                    padding: \"10px\",\r\n                    whiteSpace: \"pre-wrap\",\r\n                    overflowWrap: \"break-word\",\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}