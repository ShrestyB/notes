{"ast":null,"code":"export async function fetchGlossaryTerms(noteBody) {\n  try {\n    const response = await fetch(\"http://localhost:3001/api/ai/glossary\", {\n      // URL of your backend API\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        body: JSON.stringify({\n          text: noteBody\n        }) // Send the note body as a request payload\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch glossary terms\");\n    }\n    const data = await response.json();\n    return data.terms; // Assuming your backend returns the glossary terms in { terms: [...] }\n  } catch (error) {\n    console.error(\"Error fetching glossary terms:\", error);\n    return []; // Return an empty array on error\n  }\n}","map":{"version":3,"names":["fetchGlossaryTerms","noteBody","response","fetch","method","headers","body","JSON","stringify","text","ok","Error","data","json","terms","error","console"],"sources":["C:/Sem7/PlayPower/notes/src/components/Helpers/GlossaryService.js"],"sourcesContent":["export async function fetchGlossaryTerms(noteBody) {\r\n    try {\r\n        const response = await fetch(\"http://localhost:3001/api/ai/glossary\", { // URL of your backend API\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            body: JSON.stringify({ text: noteBody }), // Send the note body as a request payload\r\n    }});\r\n\r\n        if (!response.ok) {\r\n            throw new Error(\"Failed to fetch glossary terms\");\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data.terms; // Assuming your backend returns the glossary terms in { terms: [...] }\r\n    } catch (error) {\r\n        console.error(\"Error fetching glossary terms:\", error);\r\n        return []; // Return an empty array on error\r\n    }\r\n}\r\n"],"mappings":"AAAA,OAAO,eAAeA,kBAAkBA,CAACC,QAAQ,EAAE;EAC/C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;MAAE;MACpEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QACtCC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,IAAI,EAAER;QAAS,CAAC,CAAC,CAAE;MAClD;IAAC,CAAC,CAAC;IAEC,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;IACrD;IAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,KAAK,CAAC,CAAC;EACvB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO,EAAE,CAAC,CAAC;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}