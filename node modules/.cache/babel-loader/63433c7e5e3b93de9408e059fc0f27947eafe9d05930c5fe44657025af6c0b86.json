{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sem7\\\\PlayPower\\\\notes\\\\src\\\\components\\\\Helpers\\\\NoteBody.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { getGlossaryTerms } from \"./GlossaryService\"; // Import the service\nimport './NoteBody.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function NoteBody({\n  note,\n  setNote,\n  setNewNoteFlag\n}) {\n  _s();\n  const textAreaRef = useRef(null);\n  const [highlightedText, setHighlightedText] = useState(note.body);\n  useEffect(() => {\n    // Automatically expand text area height as per content\n    const adjustHeight = () => {\n      if (textAreaRef.current) {\n        textAreaRef.current.style.height = \"20px\";\n        textAreaRef.current.style.height = `${textAreaRef.current.scrollHeight}px`;\n      }\n    };\n    adjustHeight();\n  }, [highlightedText]);\n  useEffect(() => {\n    // Fetch glossary terms and update highlighted text\n    const fetchTermsAndHighlight = async () => {\n      const terms = await getGlossaryTerms(note.body);\n      setHighlightedText(highlightTerms(note.body, terms));\n    };\n    fetchTermsAndHighlight();\n  }, [note.body]);\n  const highlightTerms = (text, terms) => {\n    let modifiedText = text;\n    terms.forEach(term => {\n      const regex = new RegExp(`\\\\b(${term.term})\\\\b`, 'gi');\n      modifiedText = modifiedText.replace(regex, `<span class=\"highlighted-term\" title=\"${term.explanation}\">$1</span>`);\n    });\n    return modifiedText;\n  };\n  const expandNewNote = () => {\n    if (setNewNoteFlag !== undefined) {\n      setNewNoteFlag(true); // Indicate new note\n    }\n  };\n  const saveNoteBody = e => {\n    expandNewNote();\n    setNote(currentNote => ({\n      ...currentNote,\n      body: e.target.innerHTML,\n      // Save content with rich text (HTML)\n      lastEdited: Date.now()\n    }));\n  };\n  const applyStyle = style => {\n    document.execCommand(style, false, null); // Applies the formatting style\n    textAreaRef.current.focus(); // Keep focus on the text area\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"formatting-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyStyle(\"bold\"),\n        title: \"Bold\",\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyStyle(\"italic\"),\n        title: \"Italic\",\n        children: /*#__PURE__*/_jsxDEV(\"em\", {\n          children: \"I\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyStyle(\"underline\"),\n        title: \"Underline\",\n        children: /*#__PURE__*/_jsxDEV(\"u\", {\n          children: \"U\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-taker-body\",\n      contentEditable: \"true\",\n      onClick: expandNewNote,\n      onInput: saveNoteBody,\n      ref: textAreaRef,\n      dangerouslySetInnerHTML: {\n        __html: highlightedText\n      } // Load highlighted rich text\n      ,\n      style: {\n        border: '1px solid #ccc',\n        padding: '10px',\n        borderRadius: '5px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(NoteBody, \"Iwa5hhjq8la1DO2DFW9/dboMBqQ=\");\n_c = NoteBody;\nvar _c;\n$RefreshReg$(_c, \"NoteBody\");","map":{"version":3,"names":["React","useRef","useEffect","useState","getGlossaryTerms","jsxDEV","_jsxDEV","Fragment","_Fragment","NoteBody","note","setNote","setNewNoteFlag","_s","textAreaRef","highlightedText","setHighlightedText","body","adjustHeight","current","style","height","scrollHeight","fetchTermsAndHighlight","terms","highlightTerms","text","modifiedText","forEach","term","regex","RegExp","replace","explanation","expandNewNote","undefined","saveNoteBody","e","currentNote","target","innerHTML","lastEdited","Date","now","applyStyle","document","execCommand","focus","children","className","onClick","title","fileName","_jsxFileName","lineNumber","columnNumber","contentEditable","onInput","ref","dangerouslySetInnerHTML","__html","border","padding","borderRadius","_c","$RefreshReg$"],"sources":["C:/Sem7/PlayPower/notes/src/components/Helpers/NoteBody.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { getGlossaryTerms } from \"./GlossaryService\"; // Import the service\r\nimport './NoteBody.css';\r\n\r\nexport function NoteBody({ note, setNote, setNewNoteFlag }) {\r\n    const textAreaRef = useRef(null);\r\n    const [highlightedText, setHighlightedText] = useState(note.body);\r\n\r\n    useEffect(() => {\r\n        // Automatically expand text area height as per content\r\n        const adjustHeight = () => {\r\n            if (textAreaRef.current) {\r\n                textAreaRef.current.style.height = \"20px\";\r\n                textAreaRef.current.style.height = `${textAreaRef.current.scrollHeight}px`;\r\n            }\r\n        };\r\n        adjustHeight();\r\n    }, [highlightedText]);\r\n\r\n    useEffect(() => {\r\n        // Fetch glossary terms and update highlighted text\r\n        const fetchTermsAndHighlight = async () => {\r\n            const terms = await getGlossaryTerms(note.body);\r\n            setHighlightedText(highlightTerms(note.body, terms));\r\n        };\r\n        fetchTermsAndHighlight();\r\n    }, [note.body]);\r\n\r\n    const highlightTerms = (text, terms) => {\r\n        let modifiedText = text;\r\n        terms.forEach(term => {\r\n            const regex = new RegExp(`\\\\b(${term.term})\\\\b`, 'gi');\r\n            modifiedText = modifiedText.replace(regex, `<span class=\"highlighted-term\" title=\"${term.explanation}\">$1</span>`);\r\n        });\r\n        return modifiedText;\r\n    };\r\n\r\n    const expandNewNote = () => {\r\n        if (setNewNoteFlag !== undefined) {\r\n            setNewNoteFlag(true); // Indicate new note\r\n        }\r\n    };\r\n\r\n    const saveNoteBody = (e) => {\r\n        expandNewNote();\r\n        setNote(currentNote => ({\r\n            ...currentNote,\r\n            body: e.target.innerHTML, // Save content with rich text (HTML)\r\n            lastEdited: Date.now(),\r\n        }));\r\n    };\r\n\r\n    const applyStyle = (style) => {\r\n        document.execCommand(style, false, null); // Applies the formatting style\r\n        textAreaRef.current.focus(); // Keep focus on the text area\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* Formatting Toolbar */}\r\n            <div className=\"formatting-buttons\">\r\n                <button onClick={() => applyStyle(\"bold\")} title=\"Bold\">\r\n                    <strong>B</strong>\r\n                </button>\r\n                <button onClick={() => applyStyle(\"italic\")} title=\"Italic\">\r\n                    <em>I</em>\r\n                </button>\r\n                <button onClick={() => applyStyle(\"underline\")} title=\"Underline\">\r\n                    <u>U</u>\r\n                </button>\r\n            </div>\r\n            <div\r\n                className=\"note-taker-body\"\r\n                contentEditable=\"true\"\r\n                onClick={expandNewNote}\r\n                onInput={saveNoteBody}\r\n                ref={textAreaRef}\r\n                dangerouslySetInnerHTML={{ __html: highlightedText }} // Load highlighted rich text\r\n                style={{ border: '1px solid #ccc', padding: '10px', borderRadius: '5px' }}\r\n            />\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}