{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sem7\\\\PlayPower\\\\notes\\\\src\\\\components\\\\Helpers\\\\NoteBody.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { getGlossaryTerms } from \"./GlossaryService\"; // Import the service\nimport './NoteBody.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function NoteBody({\n  note,\n  setNote,\n  setNewNoteFlag\n}) {\n  _s();\n  const textAreaRef = useRef(null);\n  const [highlightedText, setHighlightedText] = useState(note.body);\n  useEffect(() => {\n    // Automatically expand text area height as per content\n    if (textAreaRef.current) {\n      textAreaRef.current.style.height = \"20px\";\n      textAreaRef.current.style.height = textAreaRef.current.scrollHeight + \"px\";\n    }\n  }, [highlightedText]);\n  useEffect(() => {\n    // Fetch glossary terms and update highlighted text\n    const fetchTermsAndHighlight = async () => {\n      const terms = await getGlossaryTerms(note.body);\n      setHighlightedText(highlightTerms(note.body, terms));\n    };\n    fetchTermsAndHighlight();\n  }, [note.body]);\n  function highlightTerms(text, terms) {\n    let modifiedText = text;\n    terms.forEach(term => {\n      const regex = new RegExp(`\\\\b(${term.term})\\\\b`, 'gi');\n      modifiedText = modifiedText.replace(regex, `<span class=\"highlighted-term\" title=\"${term.explanation}\">$1</span>`);\n    });\n    return modifiedText;\n  }\n  function expandNewNote() {\n    if (setNewNoteFlag !== undefined) {\n      setNewNoteFlag(true); // Indicate new note\n    }\n  }\n  function saveNoteBody(e) {\n    var temp = e.target.innerHTML;\n    var t = temp.reverse();\n    expandNewNote();\n    setNote(currentNote => ({\n      ...currentNote,\n      // body: e.target.innerHTML, // Save content with rich text (HTML)\n      body: currentNote.body.reverse(),\n      lastEdited: Date.now()\n    }));\n  }\n  function applyStyle(style) {\n    document.execCommand(style, false, null); // Applies the formatting style\n    textAreaRef.current.focus(); // Keep focus on the text area\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"formatting-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyStyle(\"bold\"),\n        title: \"Bold\",\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyStyle(\"italic\"),\n        title: \"Italic\",\n        children: /*#__PURE__*/_jsxDEV(\"em\", {\n          children: \"I\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyStyle(\"underline\"),\n        title: \"Underline\",\n        children: /*#__PURE__*/_jsxDEV(\"u\", {\n          children: \"U\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-taker-body\",\n      contentEditable: \"true\",\n      onClick: expandNewNote,\n      onInput: saveNoteBody,\n      ref: textAreaRef,\n      dangerouslySetInnerHTML: {\n        __html: highlightedText\n      } // Load highlighted rich text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(NoteBody, \"Iwa5hhjq8la1DO2DFW9/dboMBqQ=\");\n_c = NoteBody;\nvar _c;\n$RefreshReg$(_c, \"NoteBody\");","map":{"version":3,"names":["React","useRef","useEffect","useState","getGlossaryTerms","jsxDEV","_jsxDEV","Fragment","_Fragment","NoteBody","note","setNote","setNewNoteFlag","_s","textAreaRef","highlightedText","setHighlightedText","body","current","style","height","scrollHeight","fetchTermsAndHighlight","terms","highlightTerms","text","modifiedText","forEach","term","regex","RegExp","replace","explanation","expandNewNote","undefined","saveNoteBody","e","temp","target","innerHTML","t","reverse","currentNote","lastEdited","Date","now","applyStyle","document","execCommand","focus","children","className","onClick","title","fileName","_jsxFileName","lineNumber","columnNumber","contentEditable","onInput","ref","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["C:/Sem7/PlayPower/notes/src/components/Helpers/NoteBody.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { getGlossaryTerms } from \"./GlossaryService\"; // Import the service\r\nimport './NoteBody.css';\r\n\r\nexport function NoteBody({ note, setNote, setNewNoteFlag }) {\r\n    const textAreaRef = useRef(null);\r\n    const [highlightedText, setHighlightedText] = useState(note.body);\r\n\r\n    useEffect(() => {\r\n        // Automatically expand text area height as per content\r\n        if (textAreaRef.current) {\r\n            textAreaRef.current.style.height = \"20px\";\r\n            textAreaRef.current.style.height = textAreaRef.current.scrollHeight + \"px\";\r\n        }\r\n    }, [highlightedText]);\r\n\r\n    useEffect(() => {\r\n        // Fetch glossary terms and update highlighted text\r\n        const fetchTermsAndHighlight = async () => {\r\n            const terms = await getGlossaryTerms(note.body);\r\n            setHighlightedText(highlightTerms(note.body, terms));\r\n        };\r\n        fetchTermsAndHighlight();\r\n    }, [note.body]);\r\n\r\n    function highlightTerms(text, terms) {\r\n        let modifiedText = text;\r\n        terms.forEach(term => {\r\n            const regex = new RegExp(`\\\\b(${term.term})\\\\b`, 'gi');\r\n            modifiedText = modifiedText.replace(regex, `<span class=\"highlighted-term\" title=\"${term.explanation}\">$1</span>`);\r\n        });\r\n        return modifiedText;\r\n    }\r\n\r\n    function expandNewNote() {\r\n        if (setNewNoteFlag !== undefined) {\r\n            setNewNoteFlag(true); // Indicate new note\r\n        }\r\n    }\r\n\r\n    function saveNoteBody(e) {\r\n        var temp = e.target.innerHTML;\r\n        var t = temp.reverse();\r\n        expandNewNote();\r\n        setNote((currentNote) => ({\r\n            ...currentNote,\r\n            // body: e.target.innerHTML, // Save content with rich text (HTML)\r\n            body: currentNote.body.reverse(),\r\n            lastEdited: Date.now(),\r\n        }));\r\n    }\r\n\r\n    function applyStyle(style) {\r\n        document.execCommand(style, false, null); // Applies the formatting style\r\n        textAreaRef.current.focus(); // Keep focus on the text area\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* Formatting Toolbar */}\r\n            <div className=\"formatting-buttons\">\r\n                <button onClick={() => applyStyle(\"bold\")} title=\"Bold\">\r\n                    <strong>B</strong>\r\n                </button>\r\n                <button onClick={() => applyStyle(\"italic\")} title=\"Italic\">\r\n                    <em>I</em>\r\n                </button>\r\n                <button onClick={() => applyStyle(\"underline\")} title=\"Underline\">\r\n                    <u>U</u>\r\n                </button>\r\n            </div>\r\n            <div\r\n                className=\"note-taker-body\"\r\n                contentEditable=\"true\"\r\n                onClick={expandNewNote}\r\n                onInput={saveNoteBody}\r\n                ref={textAreaRef}\r\n                dangerouslySetInnerHTML={{ __html: highlightedText }} // Load highlighted rich text\r\n            />\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}