{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sem7\\\\PlayPower\\\\notes\\\\src\\\\components\\\\Helpers\\\\NoteBody.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function NoteBody({\n  note,\n  setNote,\n  setNewNoteFlag\n}) {\n  _s();\n  let textAreaRef = useRef(null);\n  useEffect(() => {\n    if (textAreaRef.current) {\n      textAreaRef.current.style.height = \"20px\";\n      textAreaRef.current.style.height = textAreaRef.current.scrollHeight + \"px\";\n    }\n  }, [note]);\n  function expandNewNote() {\n    if (setNewNoteFlag !== undefined) {\n      // i.e component is being used in New Note\n      setNewNoteFlag(true);\n    }\n  }\n  function saveNoteBody(e) {\n    expandNewNote();\n    setNote(currentNote => ({\n      ...currentNote,\n      body: e.target.innerHTML,\n      // Save content with rich text (HTML)\n      lastEdited: Date.now()\n    }));\n  }\n  function applyStyle(style) {\n    document.execCommand(style, false, null); // Applies the formatting style\n  }\n  const placeholder = \"Write your text...\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"formatting-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyStyle(\"bold\"),\n        children: \"Bold\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyStyle(\"italic\"),\n        children: \"Italic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyStyle(\"underline\"),\n        children: \"Underline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-taker-body\",\n      contentEditable: \"true\" // Enable rich text editing\n      ,\n      onClick: expandNewNote,\n      onInput: saveNoteBody // Capture changes and save note body\n      ,\n      ref: textAreaRef,\n      style: {\n        minHeight: \"200px\",\n        padding: \"10px\",\n        //border: \"1px solid #ccc\",\n        whiteSpace: \"pre-wrap\",\n        overflowWrap: \"break-word\",\n        color: note.body === \"\" ? \"#888\" : \"#000\",\n        // Placeholder color when empty\n        //textAlign: \"left\", // Align text to the left\n        direction: \"ltr\" // Set text direction to Left-to-Right (LTR)\n      },\n      dir: \"ltr\" // Ensure Left-to-Right text direction\n      // Render placeholder if body is empty\n      ,\n      dangerouslySetInnerHTML: {\n        __html: note.body === \"\" ? placeholder : note.body\n      },\n      onFocus: e => {\n        // Remove placeholder text when focused\n        if (note.body === \"\") {\n          e.target.innerHTML = \"\";\n        }\n      },\n      onBlur: e => {\n        // Show placeholder text again if note is empty after losing focus\n        if (note.body === \"\") {\n          e.target.innerHTML = placeholder;\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n_s(NoteBody, \"sgKjUq37zymv5NZ2Nt9pN3iZA3Y=\");\n_c = NoteBody;\nvar _c;\n$RefreshReg$(_c, \"NoteBody\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","NoteBody","note","setNote","setNewNoteFlag","_s","textAreaRef","current","style","height","scrollHeight","expandNewNote","undefined","saveNoteBody","e","currentNote","body","target","innerHTML","lastEdited","Date","now","applyStyle","document","execCommand","placeholder","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","contentEditable","onInput","ref","minHeight","padding","whiteSpace","overflowWrap","color","direction","dir","dangerouslySetInnerHTML","__html","onFocus","onBlur","_c","$RefreshReg$"],"sources":["C:/Sem7/PlayPower/notes/src/components/Helpers/NoteBody.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\n\r\nexport function NoteBody({ note, setNote, setNewNoteFlag }) {\r\n    let textAreaRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (textAreaRef.current) {\r\n            textAreaRef.current.style.height = \"20px\";\r\n            textAreaRef.current.style.height = textAreaRef.current.scrollHeight + \"px\";\r\n        }\r\n    }, [note]);\r\n\r\n    function expandNewNote() {\r\n        if (setNewNoteFlag !== undefined) {\r\n            // i.e component is being used in New Note\r\n            setNewNoteFlag(true);\r\n        }\r\n    }\r\n\r\n    function saveNoteBody(e) {\r\n        expandNewNote();\r\n        setNote((currentNote) => ({\r\n            ...currentNote,\r\n            body: e.target.innerHTML, // Save content with rich text (HTML)\r\n            lastEdited: Date.now(),\r\n        }));\r\n    }\r\n\r\n    function applyStyle(style) {\r\n        document.execCommand(style, false, null); // Applies the formatting style\r\n    }\r\n\r\n    const placeholder = \"Write your text...\";\r\n\r\n    return (\r\n        <div>\r\n            {/* Formatting Buttons */}\r\n            <div className=\"formatting-buttons\">\r\n                <button onClick={() => applyStyle(\"bold\")}>Bold</button>\r\n                <button onClick={() => applyStyle(\"italic\")}>Italic</button>\r\n                <button onClick={() => applyStyle(\"underline\")}>Underline</button>\r\n            </div>\r\n\r\n            {/* Editable Note Body */}\r\n            <div\r\n                className=\"note-taker-body\"\r\n                contentEditable=\"true\" // Enable rich text editing\r\n                onClick={expandNewNote}\r\n                onInput={saveNoteBody} // Capture changes and save note body\r\n                ref={textAreaRef}\r\n                style={{\r\n                    minHeight: \"200px\",\r\n                    padding: \"10px\",\r\n                    //border: \"1px solid #ccc\",\r\n                    whiteSpace: \"pre-wrap\",\r\n                    overflowWrap: \"break-word\",\r\n                    color: note.body === \"\" ? \"#888\" : \"#000\", // Placeholder color when empty\r\n                    //textAlign: \"left\", // Align text to the left\r\n                    direction: \"ltr\", // Set text direction to Left-to-Right (LTR)\r\n                }}\r\n                dir=\"ltr\" // Ensure Left-to-Right text direction\r\n                // Render placeholder if body is empty\r\n                dangerouslySetInnerHTML={{ __html: note.body === \"\" ? placeholder : note.body }}\r\n                onFocus={(e) => {\r\n                    // Remove placeholder text when focused\r\n                    if (note.body === \"\") {\r\n                        e.target.innerHTML = \"\";\r\n                    }\r\n                }}\r\n                onBlur={(e) => {\r\n                    // Show placeholder text again if note is empty after losing focus\r\n                    if (note.body === \"\") {\r\n                        e.target.innerHTML = placeholder;\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}