{"ast":null,"code":"var _jsxFileName = \"C:\\\\Sem7\\\\PlayPower\\\\notes\\\\src\\\\components\\\\Helpers\\\\NoteBody.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport './NoteBody.css';\nimport Tooltip from '@mui/material/Tooltip';\nimport { pipeline } from '@huggingface/inference';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function NoteBody({\n  note,\n  setNote,\n  setNewNoteFlag\n}) {\n  _s();\n  const textAreaRef = useRef(null);\n  const [inferredWords, setInferredWords] = useState({}); // State to store inferred word meanings\n\n  useEffect(() => {\n    if (textAreaRef.current) {\n      textAreaRef.current.style.height = \"20px\";\n      textAreaRef.current.style.height = textAreaRef.current.scrollHeight + \"px\";\n    }\n  }, [note]);\n  useEffect(() => {\n    // Call inference API when note content changes\n    inferWordMeanings(note.body);\n  }, [note.body]);\n  async function inferWordMeanings(text) {\n    try {\n      const model = await pipeline('fill-mask', 'bert-base-uncased'); // Hugging Face API call\n      const words = text.split(' ');\n      let difficultWords = words.filter(word => word.length > 6); // Example: mark long words as difficult\n\n      let wordMeanings = {};\n      for (const word of difficultWords) {\n        const result = await model(`${word} is [MASK]`); // Get word meaning via inference\n        wordMeanings[word] = result[0].token_str; // Store meaning for each word\n      }\n      setInferredWords(wordMeanings); // Update state with inferred meanings\n    } catch (error) {\n      console.error(\"Error fetching word meanings:\", error);\n    }\n  }\n  function expandNewNote() {\n    if (setNewNoteFlag !== undefined) {\n      setNewNoteFlag(true); // Indicate new note\n    }\n  }\n  function saveNoteBody(e) {\n    expandNewNote();\n    setNote(currentNote => ({\n      ...currentNote,\n      body: e.target.innerHTML,\n      // Save content with rich text (HTML)\n      lastEdited: Date.now()\n    }));\n    if (setNewNoteFlag) {\n      setNewNoteFlag(false);\n    }\n  }\n  function applyStyle(style) {\n    document.execCommand(style, false, null); // Applies the formatting style\n    textAreaRef.current.focus();\n  }\n  const alignText = alignment => {\n    document.execCommand('justify' + alignment, false, null); // Align text\n    textAreaRef.current.focus();\n  };\n  const changeFontSize = size => {\n    document.execCommand(\"fontSize\", false, \"5\");\n    const spans = document.getElementsByTagName(\"span\");\n    for (let i = 0; i < spans.length; i++) {\n      spans[i].style.fontSize = size;\n    }\n    textAreaRef.current.focus();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"formatting-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyStyle(\"bold\"),\n        title: \"Bold\",\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyStyle(\"italic\"),\n        title: \"Italic\",\n        children: /*#__PURE__*/_jsxDEV(\"em\", {\n          children: \"I\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => applyStyle(\"underline\"),\n        title: \"Underline\",\n        children: /*#__PURE__*/_jsxDEV(\"u\", {\n          children: \"U\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => alignText(\"Left\"),\n        title: \"Align Left\",\n        children: \"Left\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => alignText(\"Center\"),\n        title: \"Align Center\",\n        children: \"Center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => alignText(\"Right\"),\n        title: \"Align Right\",\n        children: \"Right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => alignText(\"Justify\"),\n        title: \"Justify\",\n        children: \"Justify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => changeFontSize(e.target.value),\n          title: \"Font Size\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"18px\",\n            children: \"18px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"20px\",\n            children: \"20px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"22px\",\n            children: \"22px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-taker-body\",\n      contentEditable: \"true\",\n      onClick: expandNewNote,\n      onInput: saveNoteBody,\n      ref: textAreaRef,\n      dangerouslySetInnerHTML: {\n        __html: highlightWords(note.body, inferredWords)\n      } // Highlight words with meanings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n// Function to wrap difficult words with tooltip\n_s(NoteBody, \"xyu4SZreNzVT6BFcaOSjKg33JxU=\");\n_c = NoteBody;\nfunction highlightWords(text, inferredWords) {\n  if (!inferredWords || Object.keys(inferredWords).length === 0) {\n    return text;\n  }\n  const words = text.split(' ');\n  return words.map(word => {\n    if (inferredWords[word]) {\n      return `<Tooltip title=\"${inferredWords[word]}\">${word}</Tooltip>`;\n    }\n    return word;\n  }).join(' ');\n}\nvar _c;\n$RefreshReg$(_c, \"NoteBody\");","map":{"version":3,"names":["React","useRef","useEffect","useState","Tooltip","pipeline","jsxDEV","_jsxDEV","Fragment","_Fragment","NoteBody","note","setNote","setNewNoteFlag","_s","textAreaRef","inferredWords","setInferredWords","current","style","height","scrollHeight","inferWordMeanings","body","text","model","words","split","difficultWords","filter","word","length","wordMeanings","result","token_str","error","console","expandNewNote","undefined","saveNoteBody","e","currentNote","target","innerHTML","lastEdited","Date","now","applyStyle","document","execCommand","focus","alignText","alignment","changeFontSize","size","spans","getElementsByTagName","i","fontSize","children","className","onClick","title","fileName","_jsxFileName","lineNumber","columnNumber","onChange","value","contentEditable","onInput","ref","dangerouslySetInnerHTML","__html","highlightWords","_c","Object","keys","map","join","$RefreshReg$"],"sources":["C:/Sem7/PlayPower/notes/src/components/Helpers/NoteBody.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport './NoteBody.css'; \r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport { pipeline } from '@huggingface/inference';\r\n\r\nexport function NoteBody({ note, setNote, setNewNoteFlag }) {\r\n    const textAreaRef = useRef(null);\r\n    const [inferredWords, setInferredWords] = useState({}); // State to store inferred word meanings\r\n\r\n    useEffect(() => {\r\n        if (textAreaRef.current) {\r\n            textAreaRef.current.style.height = \"20px\";\r\n            textAreaRef.current.style.height = textAreaRef.current.scrollHeight + \"px\";\r\n        }\r\n    }, [note]);\r\n\r\n    useEffect(() => {\r\n        // Call inference API when note content changes\r\n        inferWordMeanings(note.body);\r\n    }, [note.body]);\r\n\r\n    async function inferWordMeanings(text) {\r\n        try {\r\n            const model = await pipeline('fill-mask', 'bert-base-uncased'); // Hugging Face API call\r\n            const words = text.split(' ');\r\n            let difficultWords = words.filter(word => word.length > 6); // Example: mark long words as difficult\r\n\r\n            let wordMeanings = {};\r\n            for (const word of difficultWords) {\r\n                const result = await model(`${word} is [MASK]`); // Get word meaning via inference\r\n                wordMeanings[word] = result[0].token_str; // Store meaning for each word\r\n            }\r\n\r\n            setInferredWords(wordMeanings); // Update state with inferred meanings\r\n        } catch (error) {\r\n            console.error(\"Error fetching word meanings:\", error);\r\n        }\r\n    }\r\n\r\n    function expandNewNote() {\r\n        if (setNewNoteFlag !== undefined) {\r\n            setNewNoteFlag(true); // Indicate new note\r\n        }\r\n    }\r\n\r\n    function saveNoteBody(e) {\r\n        expandNewNote();\r\n        setNote((currentNote) => ({\r\n            ...currentNote,\r\n            body: e.target.innerHTML, // Save content with rich text (HTML)\r\n            lastEdited: Date.now(),\r\n        }));\r\n\r\n        if (setNewNoteFlag) {\r\n            setNewNoteFlag(false); \r\n        }\r\n    }\r\n\r\n    function applyStyle(style) {\r\n        document.execCommand(style, false, null); // Applies the formatting style\r\n        textAreaRef.current.focus(); \r\n    }\r\n\r\n    const alignText = (alignment) => {\r\n        document.execCommand('justify' + alignment, false, null); // Align text\r\n        textAreaRef.current.focus();\r\n    };\r\n\r\n    const changeFontSize = (size) => {\r\n        document.execCommand(\"fontSize\", false, \"5\");\r\n        const spans = document.getElementsByTagName(\"span\");\r\n        for (let i = 0; i < spans.length; i++) {\r\n            spans[i].style.fontSize = size; \r\n        }\r\n        textAreaRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"formatting-buttons\">\r\n                <button onClick={() => applyStyle(\"bold\")} title=\"Bold\">\r\n                    <strong>B</strong>\r\n                </button>\r\n                <button onClick={() => applyStyle(\"italic\")} title=\"Italic\">\r\n                    <em>I</em>\r\n                </button>\r\n                <button onClick={() => applyStyle(\"underline\")} title=\"Underline\">\r\n                    <u>U</u>\r\n                </button>\r\n                <button onClick={() => alignText(\"Left\")} title=\"Align Left\">\r\n                    Left\r\n                </button>\r\n                <button onClick={() => alignText(\"Center\")} title=\"Align Center\">\r\n                    Center\r\n                </button>\r\n                <button onClick={() => alignText(\"Right\")} title=\"Align Right\">\r\n                    Right\r\n                </button>\r\n                <button onClick={() => alignText(\"Justify\")} title=\"Justify\">\r\n                    Justify\r\n                </button>\r\n                <button>\r\n                    <select onChange={(e) => changeFontSize(e.target.value)} title=\"Font Size\">\r\n                        <option value=\"\"></option>\r\n                        <option value=\"18px\">18px</option>\r\n                        <option value=\"20px\">20px</option>\r\n                        <option value=\"22px\">22px</option>\r\n                    </select>\r\n                </button>\r\n            </div>\r\n\r\n            <div\r\n                className=\"note-taker-body\"\r\n                contentEditable=\"true\" \r\n                onClick={expandNewNote}\r\n                onInput={saveNoteBody} \r\n                ref={textAreaRef}\r\n                dangerouslySetInnerHTML={{ __html: highlightWords(note.body, inferredWords) }} // Highlight words with meanings\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\n// Function to wrap difficult words with tooltip\r\nfunction highlightWords(text, inferredWords) {\r\n    if (!inferredWords || Object.keys(inferredWords).length === 0) {\r\n        return text;\r\n    }\r\n\r\n    const words = text.split(' ');\r\n    return words.map(word => {\r\n        if (inferredWords[word]) {\r\n            return `<Tooltip title=\"${inferredWords[word]}\">${word}</Tooltip>`;\r\n        }\r\n        return word;\r\n    }).join(' ');\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}